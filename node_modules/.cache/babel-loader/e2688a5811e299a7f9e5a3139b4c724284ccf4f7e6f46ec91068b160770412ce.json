{"ast":null,"code":"import React,{useState,useEffect}from'react';import{ROWS,COLS,EMPTY,PLAYER_1,PLAYER_2,createEmptyBoard,findLowestEmptyRow,makeMove,isValidMove,getGameStatus}from'./gameLogic';import{getAIMove,AI_LEVEL}from'./aiPlayer';// Main Connect4 component\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Connect4Game=()=>{// Game state\nconst[board,setBoard]=useState(createEmptyBoard());const[currentPlayer,setCurrentPlayer]=useState(PLAYER_1);const[gameStatus,setGameStatus]=useState('inProgress');// 'inProgress', 'win', 'draw'\nconst[winner,setWinner]=useState(null);const[winningCells,setWinningCells]=useState([]);const[hoverColumn,setHoverColumn]=useState(null);const[gameMode,setGameMode]=useState('player-vs-player');// 'player-vs-player', 'player-vs-ai'\nconst[aiDifficulty,setAiDifficulty]=useState(AI_LEVEL.MEDIUM);const[aiThinking,setAiThinking]=useState(false);const[playerColor,setPlayerColor]=useState(PLAYER_1);// Human player color\nconst[dropAnimation,setDropAnimation]=useState({active:false,col:null,row:null});// Use effect for AI turn\nuseEffect(()=>{// If it's AI's turn in player-vs-ai mode and game is in progress\nconst isAiTurn=gameMode==='player-vs-ai'&&currentPlayer!==playerColor&&gameStatus==='inProgress';if(isAiTurn&&!dropAnimation.active){// Add a small delay to make it seem like AI is thinking\nsetAiThinking(true);const aiTimer=setTimeout(()=>{makeAIMove();setAiThinking(false);},800);return()=>clearTimeout(aiTimer);}},[currentPlayer,gameStatus,gameMode,playerColor,board,dropAnimation]);// AI makes a move\nconst makeAIMove=()=>{if(gameStatus!=='inProgress')return;const aiPlayer=playerColor===PLAYER_1?PLAYER_2:PLAYER_1;const colIndex=getAIMove(board,aiPlayer,aiDifficulty);if(colIndex!==-1){handleMove(colIndex);}};// Common function to handle moves (both player and AI)\nconst handleMove=colIndex=>{if(gameStatus!=='inProgress'||!isValidMove(board,colIndex)||dropAnimation.active)return;const rowIndex=findLowestEmptyRow(board,colIndex);if(rowIndex===-1)return;// Invalid move\n// Start drop animation\nsetDropAnimation({active:true,col:colIndex,row:rowIndex,player:currentPlayer});// After animation completes, update the board\nsetTimeout(()=>{const{board:newBoard}=makeMove(board,colIndex,currentPlayer);setBoard(newBoard);// Check game status after move\nconst status=getGameStatus(newBoard,rowIndex,colIndex);if(status.status==='win'){setGameStatus('win');setWinner(status.winner);setWinningCells(status.winningCells);}else if(status.status==='draw'){setGameStatus('draw');}else{// Switch player\nsetCurrentPlayer(currentPlayer===PLAYER_1?PLAYER_2:PLAYER_1);}// End animation\nsetDropAnimation({active:false,col:null,row:null});},400);// Animation duration\n};// Handle column click\nconst handleColumnClick=colIndex=>{// If it's AI's turn in player-vs-ai mode, do nothing\nif(gameMode==='player-vs-ai'&&currentPlayer!==playerColor){return;}handleMove(colIndex);};// Reset the game\nconst resetGame=()=>{setBoard(createEmptyBoard());setCurrentPlayer(PLAYER_1);setGameStatus('inProgress');setWinner(null);setWinningCells([]);setHoverColumn(null);setAiThinking(false);setDropAnimation({active:false,col:null,row:null});};// Change game mode\nconst changeGameMode=mode=>{setGameMode(mode);resetGame();};// Change AI difficulty\nconst changeAiDifficulty=difficulty=>{setAiDifficulty(difficulty);resetGame();};// Change player color\nconst changePlayerColor=color=>{setPlayerColor(color);resetGame();};// Render a cell\nconst renderCell=(value,rowIndex,colIndex)=>{let cellClass='cell';// Handle animation\nif(dropAnimation.active&&dropAnimation.col===colIndex&&rowIndex<=dropAnimation.row){if(rowIndex===dropAnimation.row){cellClass+=dropAnimation.player===PLAYER_1?' player1 dropping':' player2 dropping';}}else if(value===PLAYER_1){cellClass+=' player1';}else if(value===PLAYER_2){cellClass+=' player2';}// Check if this cell is part of the winning combination\nconst isWinningCell=winningCells.some(cell=>cell.row===rowIndex&&cell.col===colIndex);if(isWinningCell){cellClass+=' winning';}return/*#__PURE__*/_jsx(\"div\",{className:cellClass},`${rowIndex}-${colIndex}`);};// Render a column\nconst renderColumn=colIndex=>{const isColumnFull=findLowestEmptyRow(board,colIndex)===-1;const isHovered=hoverColumn===colIndex&&!isColumnFull&&gameStatus==='inProgress';const isPlayerTurn=gameMode!=='player-vs-ai'||currentPlayer===playerColor;const isInteractive=gameStatus==='inProgress'&&!dropAnimation.active&&isPlayerTurn;return/*#__PURE__*/_jsx(\"div\",{className:`column ${isHovered?'hover':''} ${isColumnFull?'full':''} ${!isInteractive?'not-interactive':''}`,onClick:()=>handleColumnClick(colIndex),onMouseEnter:()=>setHoverColumn(colIndex),onMouseLeave:()=>setHoverColumn(null),children:board.map((row,rowIndex)=>renderCell(row[colIndex],rowIndex,colIndex))},colIndex);};// Game status message\nconst renderGameStatus=()=>{if(gameStatus==='win'){const winnerText=gameMode==='player-vs-ai'?winner===playerColor?'You win!':'AI wins!':`Player ${winner} wins!`;return/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:winnerText});}else if(gameStatus==='draw'){return/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:\"Game ended in a draw!\"});}else if(aiThinking){return/*#__PURE__*/_jsx(\"div\",{className:\"status thinking\",children:\"AI is thinking...\"});}else if(dropAnimation.active){return/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:\"Making move...\"});}else{const turnText=gameMode==='player-vs-ai'?currentPlayer===playerColor?'Your turn':'AI turn':`Player ${currentPlayer}'s turn`;return/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:turnText});}};// Render game settings\nconst renderGameSettings=()=>{return/*#__PURE__*/_jsxs(\"div\",{className:\"game-settings\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"setting-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Game Mode:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{className:`mode-button ${gameMode==='player-vs-player'?'active':''}`,onClick:()=>changeGameMode('player-vs-player'),children:\"Player vs Player\"}),/*#__PURE__*/_jsx(\"button\",{className:`mode-button ${gameMode==='player-vs-ai'?'active':''}`,onClick:()=>changeGameMode('player-vs-ai'),children:\"Player vs AI\"})]})]}),gameMode==='player-vs-ai'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"setting-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"AI Difficulty:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{className:`difficulty-button ${aiDifficulty===AI_LEVEL.EASY?'active':''}`,onClick:()=>changeAiDifficulty(AI_LEVEL.EASY),children:\"Easy\"}),/*#__PURE__*/_jsx(\"button\",{className:`difficulty-button ${aiDifficulty===AI_LEVEL.MEDIUM?'active':''}`,onClick:()=>changeAiDifficulty(AI_LEVEL.MEDIUM),children:\"Medium\"}),/*#__PURE__*/_jsx(\"button\",{className:`difficulty-button ${aiDifficulty===AI_LEVEL.HARD?'active':''}`,onClick:()=>changeAiDifficulty(AI_LEVEL.HARD),children:\"Hard\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"setting-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Your Color:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{className:`color-button player1 ${playerColor===PLAYER_1?'active':''}`,onClick:()=>changePlayerColor(PLAYER_1),children:\"Red\"}),/*#__PURE__*/_jsx(\"button\",{className:`color-button player2 ${playerColor===PLAYER_2?'active':''}`,onClick:()=>changePlayerColor(PLAYER_2),children:\"Yellow\"})]})]})]})]});};return/*#__PURE__*/_jsxs(\"div\",{className:\"connect4-game\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Connect 4\"}),renderGameSettings(),renderGameStatus(),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:Array(COLS).fill().map((_,colIndex)=>renderColumn(colIndex))}),/*#__PURE__*/_jsx(\"button\",{className:\"reset-button\",onClick:resetGame,children:\"Reset Game\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"instructions\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"How to Play:\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Click on a column to drop your disc. The goal is to connect 4 of your discs in a row - horizontally, vertically, or diagonally.\"})]}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:`\n        .connect4-game {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          font-family: Arial, sans-serif;\n          margin: 10px auto;\n          max-width: 100%;\n          padding: 0 10px;\n        }\n        \n        h1 {\n          color: #333;\n          margin-bottom: 15px;\n          font-size: clamp(1.5rem, 4vw, 2rem);\n        }\n        \n        .status {\n          font-size: clamp(1rem, 3vw, 1.2rem);\n          margin-bottom: 15px;\n          font-weight: bold;\n          text-align: center;\n          min-height: 30px;\n        }\n        \n        .status.thinking {\n          color: #0066cc;\n        }\n        \n        .board {\n          display: flex;\n          background-color: #0066cc;\n          padding: clamp(5px, 2vw, 10px);\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n          margin: 0 auto;\n          width: fit-content;\n        }\n        \n        .column {\n          display: flex;\n          flex-direction: column;\n          cursor: pointer;\n          position: relative;\n        }\n        \n        .column.hover {\n          background-color: rgba(255, 255, 255, 0.2);\n        }\n        \n        .column.full, .column.not-interactive {\n          cursor: not-allowed;\n        }\n        \n        .cell {\n          width: clamp(30px, 10vw, 50px);\n          height: clamp(30px, 10vw, 50px);\n          margin: clamp(3px, 1vw, 5px);\n          border-radius: 50%;\n          background-color: white;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);\n          transition: background-color 0.3s ease;\n          position: relative;\n        }\n        \n        .cell.player1 {\n          background-color: #ff4136;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.player2 {\n          background-color: #ffdc00;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.winning {\n          box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3);\n          animation: pulse 1.5s infinite;\n        }\n        \n        .cell.dropping {\n          animation: dropAnimation 0.4s ease-in;\n        }\n        \n        @keyframes pulse {\n          0% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          50% { box-shadow: 0 0 15px 5px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          100% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n        }\n        \n        @keyframes dropAnimation {\n          0% { opacity: 0; transform: translateY(-300%); }\n          70% { opacity: 1; transform: translateY(10%); }\n          85% { transform: translateY(-5%); }\n          100% { transform: translateY(0); }\n        }\n        \n        .reset-button {\n          margin-top: 20px;\n          padding: 10px 20px;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n          background-color: #4CAF50;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        \n        .reset-button:hover {\n          background-color: #45a049;\n        }\n        \n        .game-settings {\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n          margin-bottom: 20px;\n          width: 100%;\n          max-width: 400px;\n        }\n        \n        .setting-group {\n          display: flex;\n          flex-direction: column;\n          gap: 5px;\n        }\n        \n        .setting-group label {\n          font-weight: bold;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n        }\n        \n        .button-group {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 5px;\n        }\n        \n        .button-group button {\n          flex: 1;\n          min-width: 80px;\n          padding: 8px;\n          font-size: clamp(0.8rem, 2vw, 0.9rem);\n          border: 1px solid #ddd;\n          background-color: #f5f5f5;\n          cursor: pointer;\n          border-radius: 4px;\n        }\n        \n        .button-group button.active {\n          border-color: #0066cc;\n          background-color: #e6f7ff;\n          font-weight: bold;\n        }\n        \n        .color-button.player1 {\n          color: white;\n          background-color: #ff4136;\n          border-color: #ff4136;\n        }\n        \n        .color-button.player2 {\n          background-color: #ffdc00;\n          border-color: #ffdc00;\n        }\n        \n        .instructions {\n          margin-top: 20px;\n          text-align: center;\n          max-width: 400px;\n        }\n        \n        .instructions h3 {\n          margin-bottom: 10px;\n        }\n        \n        /* Mobile-specific styles */\n        @media (max-width: 480px) {\n          .game-settings {\n            padding: 0 5px;\n          }\n          \n          .button-group {\n            flex-direction: column;\n          }\n          \n          .button-group button {\n            width: 100%;\n          }\n        }\n      `})]});};export default Connect4Game;","map":{"version":3,"names":["React","useState","useEffect","ROWS","COLS","EMPTY","PLAYER_1","PLAYER_2","createEmptyBoard","findLowestEmptyRow","makeMove","isValidMove","getGameStatus","getAIMove","AI_LEVEL","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Connect4Game","board","setBoard","currentPlayer","setCurrentPlayer","gameStatus","setGameStatus","winner","setWinner","winningCells","setWinningCells","hoverColumn","setHoverColumn","gameMode","setGameMode","aiDifficulty","setAiDifficulty","MEDIUM","aiThinking","setAiThinking","playerColor","setPlayerColor","dropAnimation","setDropAnimation","active","col","row","isAiTurn","aiTimer","setTimeout","makeAIMove","clearTimeout","aiPlayer","colIndex","handleMove","rowIndex","player","newBoard","status","handleColumnClick","resetGame","changeGameMode","mode","changeAiDifficulty","difficulty","changePlayerColor","color","renderCell","value","cellClass","isWinningCell","some","cell","className","renderColumn","isColumnFull","isHovered","isPlayerTurn","isInteractive","onClick","onMouseEnter","onMouseLeave","children","map","renderGameStatus","winnerText","turnText","renderGameSettings","EASY","HARD","Array","fill","_"],"sources":["/Users/ianjbrowne/Library/Mobile Documents/com~apple~CloudDocs/ibrow10/Connect4/src/Connect4Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  ROWS, \n  COLS, \n  EMPTY, \n  PLAYER_1, \n  PLAYER_2, \n  createEmptyBoard, \n  findLowestEmptyRow,\n  makeMove,\n  isValidMove,\n  getGameStatus\n} from './gameLogic';\nimport { getAIMove, AI_LEVEL } from './aiPlayer';\n\n// Main Connect4 component\nconst Connect4Game = () => {\n  // Game state\n  const [board, setBoard] = useState(createEmptyBoard());\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n  const [gameStatus, setGameStatus] = useState('inProgress'); // 'inProgress', 'win', 'draw'\n  const [winner, setWinner] = useState(null);\n  const [winningCells, setWinningCells] = useState([]);\n  const [hoverColumn, setHoverColumn] = useState(null);\n  const [gameMode, setGameMode] = useState('player-vs-player'); // 'player-vs-player', 'player-vs-ai'\n  const [aiDifficulty, setAiDifficulty] = useState(AI_LEVEL.MEDIUM);\n  const [aiThinking, setAiThinking] = useState(false);\n  const [playerColor, setPlayerColor] = useState(PLAYER_1); // Human player color\n  const [dropAnimation, setDropAnimation] = useState({ active: false, col: null, row: null });\n  \n  // Use effect for AI turn\n  useEffect(() => {\n    // If it's AI's turn in player-vs-ai mode and game is in progress\n    const isAiTurn = gameMode === 'player-vs-ai' && \n                     currentPlayer !== playerColor && \n                     gameStatus === 'inProgress';\n    \n    if (isAiTurn && !dropAnimation.active) {\n      // Add a small delay to make it seem like AI is thinking\n      setAiThinking(true);\n      const aiTimer = setTimeout(() => {\n        makeAIMove();\n        setAiThinking(false);\n      }, 800);\n      \n      return () => clearTimeout(aiTimer);\n    }\n  }, [currentPlayer, gameStatus, gameMode, playerColor, board, dropAnimation]);\n  \n  // AI makes a move\n  const makeAIMove = () => {\n    if (gameStatus !== 'inProgress') return;\n    \n    const aiPlayer = playerColor === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n    const colIndex = getAIMove(board, aiPlayer, aiDifficulty);\n    \n    if (colIndex !== -1) {\n      handleMove(colIndex);\n    }\n  };\n  \n  // Common function to handle moves (both player and AI)\n  const handleMove = (colIndex) => {\n    if (gameStatus !== 'inProgress' || !isValidMove(board, colIndex) || dropAnimation.active) return;\n    \n    const rowIndex = findLowestEmptyRow(board, colIndex);\n    if (rowIndex === -1) return; // Invalid move\n    \n    // Start drop animation\n    setDropAnimation({ active: true, col: colIndex, row: rowIndex, player: currentPlayer });\n    \n    // After animation completes, update the board\n    setTimeout(() => {\n      const { board: newBoard } = makeMove(board, colIndex, currentPlayer);\n      setBoard(newBoard);\n      \n      // Check game status after move\n      const status = getGameStatus(newBoard, rowIndex, colIndex);\n      \n      if (status.status === 'win') {\n        setGameStatus('win');\n        setWinner(status.winner);\n        setWinningCells(status.winningCells);\n      } else if (status.status === 'draw') {\n        setGameStatus('draw');\n      } else {\n        // Switch player\n        setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1);\n      }\n      \n      // End animation\n      setDropAnimation({ active: false, col: null, row: null });\n    }, 400); // Animation duration\n  };\n  \n  // Handle column click\n  const handleColumnClick = (colIndex) => {\n    // If it's AI's turn in player-vs-ai mode, do nothing\n    if (gameMode === 'player-vs-ai' && currentPlayer !== playerColor) {\n      return;\n    }\n    \n    handleMove(colIndex);\n  };\n  \n  // Reset the game\n  const resetGame = () => {\n    setBoard(createEmptyBoard());\n    setCurrentPlayer(PLAYER_1);\n    setGameStatus('inProgress');\n    setWinner(null);\n    setWinningCells([]);\n    setHoverColumn(null);\n    setAiThinking(false);\n    setDropAnimation({ active: false, col: null, row: null });\n  };\n  \n  // Change game mode\n  const changeGameMode = (mode) => {\n    setGameMode(mode);\n    resetGame();\n  };\n  \n  // Change AI difficulty\n  const changeAiDifficulty = (difficulty) => {\n    setAiDifficulty(difficulty);\n    resetGame();\n  };\n  \n  // Change player color\n  const changePlayerColor = (color) => {\n    setPlayerColor(color);\n    resetGame();\n  };\n  \n  // Render a cell\n  const renderCell = (value, rowIndex, colIndex) => {\n    let cellClass = 'cell';\n    \n    // Handle animation\n    if (dropAnimation.active && dropAnimation.col === colIndex && rowIndex <= dropAnimation.row) {\n      if (rowIndex === dropAnimation.row) {\n        cellClass += dropAnimation.player === PLAYER_1 ? ' player1 dropping' : ' player2 dropping';\n      }\n    } else if (value === PLAYER_1) {\n      cellClass += ' player1';\n    } else if (value === PLAYER_2) {\n      cellClass += ' player2';\n    }\n    \n    // Check if this cell is part of the winning combination\n    const isWinningCell = winningCells.some(cell => \n      cell.row === rowIndex && cell.col === colIndex\n    );\n    \n    if (isWinningCell) {\n      cellClass += ' winning';\n    }\n    \n    return (\n      <div \n        key={`${rowIndex}-${colIndex}`} \n        className={cellClass}\n      />\n    );\n  };\n  \n  // Render a column\n  const renderColumn = (colIndex) => {\n    const isColumnFull = findLowestEmptyRow(board, colIndex) === -1;\n    const isHovered = hoverColumn === colIndex && !isColumnFull && gameStatus === 'inProgress';\n    const isPlayerTurn = gameMode !== 'player-vs-ai' || currentPlayer === playerColor;\n    const isInteractive = gameStatus === 'inProgress' && !dropAnimation.active && isPlayerTurn;\n    \n    return (\n      <div \n        key={colIndex} \n        className={`column ${isHovered ? 'hover' : ''} ${isColumnFull ? 'full' : ''} ${!isInteractive ? 'not-interactive' : ''}`}\n        onClick={() => handleColumnClick(colIndex)}\n        onMouseEnter={() => setHoverColumn(colIndex)}\n        onMouseLeave={() => setHoverColumn(null)}\n      >\n        {board.map((row, rowIndex) => renderCell(row[colIndex], rowIndex, colIndex))}\n      </div>\n    );\n  };\n  \n  // Game status message\n  const renderGameStatus = () => {\n    if (gameStatus === 'win') {\n      const winnerText = gameMode === 'player-vs-ai' \n        ? (winner === playerColor ? 'You win!' : 'AI wins!') \n        : `Player ${winner} wins!`;\n      return <div className=\"status\">{winnerText}</div>;\n    } else if (gameStatus === 'draw') {\n      return <div className=\"status\">Game ended in a draw!</div>;\n    } else if (aiThinking) {\n      return <div className=\"status thinking\">AI is thinking...</div>;\n    } else if (dropAnimation.active) {\n      return <div className=\"status\">Making move...</div>;\n    } else {\n      const turnText = gameMode === 'player-vs-ai'\n        ? (currentPlayer === playerColor ? 'Your turn' : 'AI turn')\n        : `Player ${currentPlayer}'s turn`;\n      return <div className=\"status\">{turnText}</div>;\n    }\n  };\n  \n  // Render game settings\n  const renderGameSettings = () => {\n    return (\n      <div className=\"game-settings\">\n        <div className=\"setting-group\">\n          <label>Game Mode:</label>\n          <div className=\"button-group\">\n            <button \n              className={`mode-button ${gameMode === 'player-vs-player' ? 'active' : ''}`}\n              onClick={() => changeGameMode('player-vs-player')}\n            >\n              Player vs Player\n            </button>\n            <button \n              className={`mode-button ${gameMode === 'player-vs-ai' ? 'active' : ''}`}\n              onClick={() => changeGameMode('player-vs-ai')}\n            >\n              Player vs AI\n            </button>\n          </div>\n        </div>\n        \n        {gameMode === 'player-vs-ai' && (\n          <>\n            <div className=\"setting-group\">\n              <label>AI Difficulty:</label>\n              <div className=\"button-group\">\n                <button \n                  className={`difficulty-button ${aiDifficulty === AI_LEVEL.EASY ? 'active' : ''}`}\n                  onClick={() => changeAiDifficulty(AI_LEVEL.EASY)}\n                >\n                  Easy\n                </button>\n                <button \n                  className={`difficulty-button ${aiDifficulty === AI_LEVEL.MEDIUM ? 'active' : ''}`}\n                  onClick={() => changeAiDifficulty(AI_LEVEL.MEDIUM)}\n                >\n                  Medium\n                </button>\n                <button \n                  className={`difficulty-button ${aiDifficulty === AI_LEVEL.HARD ? 'active' : ''}`}\n                  onClick={() => changeAiDifficulty(AI_LEVEL.HARD)}\n                >\n                  Hard\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"setting-group\">\n              <label>Your Color:</label>\n              <div className=\"button-group\">\n                <button \n                  className={`color-button player1 ${playerColor === PLAYER_1 ? 'active' : ''}`}\n                  onClick={() => changePlayerColor(PLAYER_1)}\n                >\n                  Red\n                </button>\n                <button \n                  className={`color-button player2 ${playerColor === PLAYER_2 ? 'active' : ''}`}\n                  onClick={() => changePlayerColor(PLAYER_2)}\n                >\n                  Yellow\n                </button>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"connect4-game\">\n      <h1>Connect 4</h1>\n      \n      {renderGameSettings()}\n      \n      {renderGameStatus()}\n      \n      <div className=\"board\">\n        {Array(COLS).fill().map((_, colIndex) => renderColumn(colIndex))}\n      </div>\n      \n      <button className=\"reset-button\" onClick={resetGame}>\n        Reset Game\n      </button>\n      \n      <div className=\"instructions\">\n        <h3>How to Play:</h3>\n        <p>Click on a column to drop your disc. The goal is to connect 4 of your discs in a row - horizontally, vertically, or diagonally.</p>\n      </div>\n      \n      <style jsx>{`\n        .connect4-game {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          font-family: Arial, sans-serif;\n          margin: 10px auto;\n          max-width: 100%;\n          padding: 0 10px;\n        }\n        \n        h1 {\n          color: #333;\n          margin-bottom: 15px;\n          font-size: clamp(1.5rem, 4vw, 2rem);\n        }\n        \n        .status {\n          font-size: clamp(1rem, 3vw, 1.2rem);\n          margin-bottom: 15px;\n          font-weight: bold;\n          text-align: center;\n          min-height: 30px;\n        }\n        \n        .status.thinking {\n          color: #0066cc;\n        }\n        \n        .board {\n          display: flex;\n          background-color: #0066cc;\n          padding: clamp(5px, 2vw, 10px);\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n          margin: 0 auto;\n          width: fit-content;\n        }\n        \n        .column {\n          display: flex;\n          flex-direction: column;\n          cursor: pointer;\n          position: relative;\n        }\n        \n        .column.hover {\n          background-color: rgba(255, 255, 255, 0.2);\n        }\n        \n        .column.full, .column.not-interactive {\n          cursor: not-allowed;\n        }\n        \n        .cell {\n          width: clamp(30px, 10vw, 50px);\n          height: clamp(30px, 10vw, 50px);\n          margin: clamp(3px, 1vw, 5px);\n          border-radius: 50%;\n          background-color: white;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);\n          transition: background-color 0.3s ease;\n          position: relative;\n        }\n        \n        .cell.player1 {\n          background-color: #ff4136;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.player2 {\n          background-color: #ffdc00;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.winning {\n          box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3);\n          animation: pulse 1.5s infinite;\n        }\n        \n        .cell.dropping {\n          animation: dropAnimation 0.4s ease-in;\n        }\n        \n        @keyframes pulse {\n          0% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          50% { box-shadow: 0 0 15px 5px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          100% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n        }\n        \n        @keyframes dropAnimation {\n          0% { opacity: 0; transform: translateY(-300%); }\n          70% { opacity: 1; transform: translateY(10%); }\n          85% { transform: translateY(-5%); }\n          100% { transform: translateY(0); }\n        }\n        \n        .reset-button {\n          margin-top: 20px;\n          padding: 10px 20px;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n          background-color: #4CAF50;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        \n        .reset-button:hover {\n          background-color: #45a049;\n        }\n        \n        .game-settings {\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n          margin-bottom: 20px;\n          width: 100%;\n          max-width: 400px;\n        }\n        \n        .setting-group {\n          display: flex;\n          flex-direction: column;\n          gap: 5px;\n        }\n        \n        .setting-group label {\n          font-weight: bold;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n        }\n        \n        .button-group {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 5px;\n        }\n        \n        .button-group button {\n          flex: 1;\n          min-width: 80px;\n          padding: 8px;\n          font-size: clamp(0.8rem, 2vw, 0.9rem);\n          border: 1px solid #ddd;\n          background-color: #f5f5f5;\n          cursor: pointer;\n          border-radius: 4px;\n        }\n        \n        .button-group button.active {\n          border-color: #0066cc;\n          background-color: #e6f7ff;\n          font-weight: bold;\n        }\n        \n        .color-button.player1 {\n          color: white;\n          background-color: #ff4136;\n          border-color: #ff4136;\n        }\n        \n        .color-button.player2 {\n          background-color: #ffdc00;\n          border-color: #ffdc00;\n        }\n        \n        .instructions {\n          margin-top: 20px;\n          text-align: center;\n          max-width: 400px;\n        }\n        \n        .instructions h3 {\n          margin-bottom: 10px;\n        }\n        \n        /* Mobile-specific styles */\n        @media (max-width: 480px) {\n          .game-settings {\n            padding: 0 5px;\n          }\n          \n          .button-group {\n            flex-direction: column;\n          }\n          \n          .button-group button {\n            width: 100%;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Connect4Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}