{"ast":null,"code":"var _jsxFileName = \"/Users/ianjbrowne/Library/Mobile Documents/com~apple~CloudDocs/ibrow10/Connect4/src/Connect4Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ROWS, COLS, EMPTY, PLAYER_1, PLAYER_2, createEmptyBoard, findLowestEmptyRow, makeMove, isValidMove, getGameStatus } from './gameLogic';\nimport { getAIMove, AI_LEVEL, AI_PERSONA } from './aiPlayer';\n\n// Main Connect4 component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Connect4Game = () => {\n  _s();\n  // Game state\n  const [board, setBoard] = useState(createEmptyBoard());\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n  const [gameStatus, setGameStatus] = useState('inProgress'); // 'inProgress', 'win', 'draw'\n  const [winner, setWinner] = useState(null);\n  const [winningCells, setWinningCells] = useState([]);\n  const [hoverColumn, setHoverColumn] = useState(null);\n  const [gameMode, setGameMode] = useState('player-vs-player'); // 'player-vs-player', 'player-vs-ai'\n  const [aiDifficulty, setAiDifficulty] = useState(AI_LEVEL.MEDIUM);\n  const [aiThinking, setAiThinking] = useState(false);\n  const [playerColor, setPlayerColor] = useState(PLAYER_1); // Human player color\n  const [dropAnimation, setDropAnimation] = useState({\n    active: false,\n    col: null,\n    row: null\n  });\n\n  // Use effect for AI turn\n  useEffect(() => {\n    // If it's AI's turn in player-vs-ai mode and game is in progress\n    const isAiTurn = gameMode === 'player-vs-ai' && currentPlayer !== playerColor && gameStatus === 'inProgress';\n    if (isAiTurn && !dropAnimation.active) {\n      // Add a small delay to make it seem like AI is thinking\n      setAiThinking(true);\n      const aiTimer = setTimeout(() => {\n        makeAIMove();\n        setAiThinking(false);\n      }, 800);\n      return () => clearTimeout(aiTimer);\n    }\n  }, [currentPlayer, gameStatus, gameMode, playerColor, board, dropAnimation]);\n\n  // AI makes a move\n  const makeAIMove = () => {\n    if (gameStatus !== 'inProgress') return;\n    const aiPlayer = playerColor === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n    const colIndex = getAIMove(board, aiPlayer, aiDifficulty);\n    if (colIndex !== -1) {\n      handleMove(colIndex);\n    }\n  };\n\n  // Common function to handle moves (both player and AI)\n  const handleMove = colIndex => {\n    if (gameStatus !== 'inProgress' || !isValidMove(board, colIndex) || dropAnimation.active) return;\n    const rowIndex = findLowestEmptyRow(board, colIndex);\n    if (rowIndex === -1) return; // Invalid move\n\n    // Start drop animation\n    setDropAnimation({\n      active: true,\n      col: colIndex,\n      row: rowIndex,\n      player: currentPlayer\n    });\n\n    // After animation completes, update the board\n    setTimeout(() => {\n      const {\n        board: newBoard\n      } = makeMove(board, colIndex, currentPlayer);\n      setBoard(newBoard);\n\n      // Check game status after move\n      const status = getGameStatus(newBoard, rowIndex, colIndex);\n      if (status.status === 'win') {\n        setGameStatus('win');\n        setWinner(status.winner);\n        setWinningCells(status.winningCells);\n      } else if (status.status === 'draw') {\n        setGameStatus('draw');\n      } else {\n        // Switch player\n        setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1);\n      }\n\n      // End animation\n      setDropAnimation({\n        active: false,\n        col: null,\n        row: null\n      });\n    }, 400); // Animation duration\n  };\n\n  // Handle column click\n  const handleColumnClick = colIndex => {\n    // If it's AI's turn in player-vs-ai mode, do nothing\n    if (gameMode === 'player-vs-ai' && currentPlayer !== playerColor) {\n      return;\n    }\n    handleMove(colIndex);\n  };\n\n  // Reset the game\n  const resetGame = () => {\n    setBoard(createEmptyBoard());\n    setCurrentPlayer(PLAYER_1);\n    setGameStatus('inProgress');\n    setWinner(null);\n    setWinningCells([]);\n    setHoverColumn(null);\n    setAiThinking(false);\n    setDropAnimation({\n      active: false,\n      col: null,\n      row: null\n    });\n  };\n\n  // Change game mode\n  const changeGameMode = mode => {\n    setGameMode(mode);\n    resetGame();\n  };\n\n  // Change AI difficulty\n  const changeAiDifficulty = difficulty => {\n    setAiDifficulty(difficulty);\n    resetGame();\n  };\n\n  // Change player color\n  const changePlayerColor = color => {\n    setPlayerColor(color);\n    resetGame();\n  };\n\n  // Render a cell\n  const renderCell = (value, rowIndex, colIndex) => {\n    let cellClass = 'cell';\n\n    // Handle animation\n    if (dropAnimation.active && dropAnimation.col === colIndex && rowIndex <= dropAnimation.row) {\n      if (rowIndex === dropAnimation.row) {\n        cellClass += dropAnimation.player === PLAYER_1 ? ' player1 dropping' : ' player2 dropping';\n      }\n    } else if (value === PLAYER_1) {\n      cellClass += ' player1';\n    } else if (value === PLAYER_2) {\n      cellClass += ' player2';\n    }\n\n    // Check if this cell is part of the winning combination\n    const isWinningCell = winningCells.some(cell => cell.row === rowIndex && cell.col === colIndex);\n    if (isWinningCell) {\n      cellClass += ' winning';\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cellClass\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render a column\n  const renderColumn = colIndex => {\n    const isColumnFull = findLowestEmptyRow(board, colIndex) === -1;\n    const isHovered = hoverColumn === colIndex && !isColumnFull && gameStatus === 'inProgress';\n    const isPlayerTurn = gameMode !== 'player-vs-ai' || currentPlayer === playerColor;\n    const isInteractive = gameStatus === 'inProgress' && !dropAnimation.active && isPlayerTurn;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `column ${isHovered ? 'hover' : ''} ${isColumnFull ? 'full' : ''} ${!isInteractive ? 'not-interactive' : ''}`,\n      onClick: () => handleColumnClick(colIndex),\n      onMouseEnter: () => setHoverColumn(colIndex),\n      onMouseLeave: () => setHoverColumn(null),\n      children: board.map((row, rowIndex) => renderCell(row[colIndex], rowIndex, colIndex))\n    }, colIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Game status message\n  const renderGameStatus = () => {\n    if (gameStatus === 'win') {\n      const winnerText = gameMode === 'player-vs-ai' ? winner === playerColor ? 'You win!' : 'AI wins!' : `Player ${winner} wins!`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: winnerText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 14\n      }, this);\n    } else if (gameStatus === 'draw') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"Game ended in a draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 14\n      }, this);\n    } else if (aiThinking) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status thinking\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 14\n      }, this);\n    } else if (dropAnimation.active) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"Making move...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 14\n      }, this);\n    } else {\n      const turnText = gameMode === 'player-vs-ai' ? currentPlayer === playerColor ? 'Your turn' : 'AI turn' : `Player ${currentPlayer}'s turn`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: turnText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  // Render game settings\n  const renderGameSettings = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Game Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mode-button ${gameMode === 'player-vs-player' ? 'active' : ''}`,\n            onClick: () => changeGameMode('player-vs-player'),\n            children: \"Player vs Player\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mode-button ${gameMode === 'player-vs-ai' ? 'active' : ''}`,\n            onClick: () => changeGameMode('player-vs-ai'),\n            children: \"Player vs AI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), gameMode === 'player-vs-ai' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"AI Difficulty:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `difficulty-button ${aiDifficulty === AI_LEVEL.EASY ? 'active' : ''}`,\n              onClick: () => changeAiDifficulty(AI_LEVEL.EASY),\n              children: \"Easy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `difficulty-button ${aiDifficulty === AI_LEVEL.MEDIUM ? 'active' : ''}`,\n              onClick: () => changeAiDifficulty(AI_LEVEL.MEDIUM),\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `difficulty-button ${aiDifficulty === AI_LEVEL.HARD ? 'active' : ''}`,\n              onClick: () => changeAiDifficulty(AI_LEVEL.HARD),\n              children: \"Hard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Your Color:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `color-button player1 ${playerColor === PLAYER_1 ? 'active' : ''}`,\n              onClick: () => changePlayerColor(PLAYER_1),\n              children: \"Red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `color-button player2 ${playerColor === PLAYER_2 ? 'active' : ''}`,\n              onClick: () => changePlayerColor(PLAYER_2),\n              children: \"Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect4-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Connect 4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), renderGameSettings(), renderGameStatus(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: Array(COLS).fill().map((_, colIndex) => renderColumn(colIndex))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      onClick: resetGame,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"How to Play:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click on a column to drop your disc. The goal is to connect 4 of your discs in a row - horizontally, vertically, or diagonally.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .connect4-game {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          font-family: Arial, sans-serif;\n          margin: 10px auto;\n          max-width: 100%;\n          padding: 0 10px;\n        }\n        \n        h1 {\n          color: #333;\n          margin-bottom: 15px;\n          font-size: clamp(1.5rem, 4vw, 2rem);\n        }\n        \n        .status {\n          font-size: clamp(1rem, 3vw, 1.2rem);\n          margin-bottom: 15px;\n          font-weight: bold;\n          text-align: center;\n          min-height: 30px;\n        }\n        \n        .status.thinking {\n          color: #0066cc;\n        }\n        \n        .board {\n          display: flex;\n          background-color: #0066cc;\n          padding: clamp(5px, 2vw, 10px);\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n          margin: 0 auto;\n          width: fit-content;\n        }\n        \n        .column {\n          display: flex;\n          flex-direction: column;\n          cursor: pointer;\n          position: relative;\n        }\n        \n        .column.hover {\n          background-color: rgba(255, 255, 255, 0.2);\n        }\n        \n        .column.full, .column.not-interactive {\n          cursor: not-allowed;\n        }\n        \n        .cell {\n          width: clamp(30px, 10vw, 50px);\n          height: clamp(30px, 10vw, 50px);\n          margin: clamp(3px, 1vw, 5px);\n          border-radius: 50%;\n          background-color: white;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);\n          transition: background-color 0.3s ease;\n          position: relative;\n        }\n        \n        .cell.player1 {\n          background-color: #ff4136;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.player2 {\n          background-color: #ffdc00;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.winning {\n          box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3);\n          animation: pulse 1.5s infinite;\n        }\n        \n        .cell.dropping {\n          animation: dropAnimation 0.4s ease-in;\n        }\n        \n        @keyframes pulse {\n          0% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          50% { box-shadow: 0 0 15px 5px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          100% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n        }\n        \n        @keyframes dropAnimation {\n          0% { opacity: 0; transform: translateY(-300%); }\n          70% { opacity: 1; transform: translateY(10%); }\n          85% { transform: translateY(-5%); }\n          100% { transform: translateY(0); }\n        }\n        \n        .reset-button {\n          margin-top: 20px;\n          padding: 10px 20px;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n          background-color: #4CAF50;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        \n        .reset-button:hover {\n          background-color: #45a049;\n        }\n        \n        .game-settings {\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n          margin-bottom: 20px;\n          width: 100%;\n          max-width: 400px;\n        }\n        \n        .setting-group {\n          display: flex;\n          flex-direction: column;\n          gap: 5px;\n        }\n        \n        .setting-group label {\n          font-weight: bold;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n        }\n        \n        .button-group {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 5px;\n        }\n        \n        .button-group button {\n          flex: 1;\n          min-width: 80px;\n          padding: 8px;\n          font-size: clamp(0.8rem, 2vw, 0.9rem);\n          border: 1px solid #ddd;\n          background-color: #f5f5f5;\n          cursor: pointer;\n          border-radius: 4px;\n        }\n        \n        .button-group button.active {\n          border-color: #0066cc;\n          background-color: #e6f7ff;\n          font-weight: bold;\n        }\n        \n        .color-button.player1 {\n          color: white;\n          background-color: #ff4136;\n          border-color: #ff4136;\n        }\n        \n        .color-button.player2 {\n          background-color: #ffdc00;\n          border-color: #ffdc00;\n        }\n        \n        .instructions {\n          margin-top: 20px;\n          text-align: center;\n          max-width: 400px;\n        }\n        \n        .instructions h3 {\n          margin-bottom: 10px;\n        }\n        \n        /* Mobile-specific styles */\n        @media (max-width: 480px) {\n          .game-settings {\n            padding: 0 5px;\n          }\n          \n          .button-group {\n            flex-direction: column;\n          }\n          \n          .button-group button {\n            width: 100%;\n          }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s(Connect4Game, \"u3OBXdQLB0lK9hzmT8UK5lOcSH0=\");\n_c = Connect4Game;\nexport default Connect4Game;\nvar _c;\n$RefreshReg$(_c, \"Connect4Game\");","map":{"version":3,"names":["React","useState","useEffect","ROWS","COLS","EMPTY","PLAYER_1","PLAYER_2","createEmptyBoard","findLowestEmptyRow","makeMove","isValidMove","getGameStatus","getAIMove","AI_LEVEL","AI_PERSONA","jsxDEV","_jsxDEV","Fragment","_Fragment","Connect4Game","_s","board","setBoard","currentPlayer","setCurrentPlayer","gameStatus","setGameStatus","winner","setWinner","winningCells","setWinningCells","hoverColumn","setHoverColumn","gameMode","setGameMode","aiDifficulty","setAiDifficulty","MEDIUM","aiThinking","setAiThinking","playerColor","setPlayerColor","dropAnimation","setDropAnimation","active","col","row","isAiTurn","aiTimer","setTimeout","makeAIMove","clearTimeout","aiPlayer","colIndex","handleMove","rowIndex","player","newBoard","status","handleColumnClick","resetGame","changeGameMode","mode","changeAiDifficulty","difficulty","changePlayerColor","color","renderCell","value","cellClass","isWinningCell","some","cell","className","fileName","_jsxFileName","lineNumber","columnNumber","renderColumn","isColumnFull","isHovered","isPlayerTurn","isInteractive","onClick","onMouseEnter","onMouseLeave","children","map","renderGameStatus","winnerText","turnText","renderGameSettings","EASY","HARD","Array","fill","_","jsx","_c","$RefreshReg$"],"sources":["/Users/ianjbrowne/Library/Mobile Documents/com~apple~CloudDocs/ibrow10/Connect4/src/Connect4Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  ROWS, \n  COLS, \n  EMPTY, \n  PLAYER_1, \n  PLAYER_2, \n  createEmptyBoard, \n  findLowestEmptyRow,\n  makeMove,\n  isValidMove,\n  getGameStatus\n} from './gameLogic';\nimport { getAIMove, AI_LEVEL, AI_PERSONA } from './aiPlayer';\n\n// Main Connect4 component\nconst Connect4Game = () => {\n  // Game state\n  const [board, setBoard] = useState(createEmptyBoard());\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n  const [gameStatus, setGameStatus] = useState('inProgress'); // 'inProgress', 'win', 'draw'\n  const [winner, setWinner] = useState(null);\n  const [winningCells, setWinningCells] = useState([]);\n  const [hoverColumn, setHoverColumn] = useState(null);\n  const [gameMode, setGameMode] = useState('player-vs-player'); // 'player-vs-player', 'player-vs-ai'\n  const [aiDifficulty, setAiDifficulty] = useState(AI_LEVEL.MEDIUM);\n  const [aiThinking, setAiThinking] = useState(false);\n  const [playerColor, setPlayerColor] = useState(PLAYER_1); // Human player color\n  const [dropAnimation, setDropAnimation] = useState({ active: false, col: null, row: null });\n  \n  // Use effect for AI turn\n  useEffect(() => {\n    // If it's AI's turn in player-vs-ai mode and game is in progress\n    const isAiTurn = gameMode === 'player-vs-ai' && \n                     currentPlayer !== playerColor && \n                     gameStatus === 'inProgress';\n    \n    if (isAiTurn && !dropAnimation.active) {\n      // Add a small delay to make it seem like AI is thinking\n      setAiThinking(true);\n      const aiTimer = setTimeout(() => {\n        makeAIMove();\n        setAiThinking(false);\n      }, 800);\n      \n      return () => clearTimeout(aiTimer);\n    }\n  }, [currentPlayer, gameStatus, gameMode, playerColor, board, dropAnimation]);\n  \n  // AI makes a move\n  const makeAIMove = () => {\n    if (gameStatus !== 'inProgress') return;\n    \n    const aiPlayer = playerColor === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n    const colIndex = getAIMove(board, aiPlayer, aiDifficulty);\n    \n    if (colIndex !== -1) {\n      handleMove(colIndex);\n    }\n  };\n  \n  // Common function to handle moves (both player and AI)\n  const handleMove = (colIndex) => {\n    if (gameStatus !== 'inProgress' || !isValidMove(board, colIndex) || dropAnimation.active) return;\n    \n    const rowIndex = findLowestEmptyRow(board, colIndex);\n    if (rowIndex === -1) return; // Invalid move\n    \n    // Start drop animation\n    setDropAnimation({ active: true, col: colIndex, row: rowIndex, player: currentPlayer });\n    \n    // After animation completes, update the board\n    setTimeout(() => {\n      const { board: newBoard } = makeMove(board, colIndex, currentPlayer);\n      setBoard(newBoard);\n      \n      // Check game status after move\n      const status = getGameStatus(newBoard, rowIndex, colIndex);\n      \n      if (status.status === 'win') {\n        setGameStatus('win');\n        setWinner(status.winner);\n        setWinningCells(status.winningCells);\n      } else if (status.status === 'draw') {\n        setGameStatus('draw');\n      } else {\n        // Switch player\n        setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1);\n      }\n      \n      // End animation\n      setDropAnimation({ active: false, col: null, row: null });\n    }, 400); // Animation duration\n  };\n  \n  // Handle column click\n  const handleColumnClick = (colIndex) => {\n    // If it's AI's turn in player-vs-ai mode, do nothing\n    if (gameMode === 'player-vs-ai' && currentPlayer !== playerColor) {\n      return;\n    }\n    \n    handleMove(colIndex);\n  };\n  \n  // Reset the game\n  const resetGame = () => {\n    setBoard(createEmptyBoard());\n    setCurrentPlayer(PLAYER_1);\n    setGameStatus('inProgress');\n    setWinner(null);\n    setWinningCells([]);\n    setHoverColumn(null);\n    setAiThinking(false);\n    setDropAnimation({ active: false, col: null, row: null });\n  };\n  \n  // Change game mode\n  const changeGameMode = (mode) => {\n    setGameMode(mode);\n    resetGame();\n  };\n  \n  // Change AI difficulty\n  const changeAiDifficulty = (difficulty) => {\n    setAiDifficulty(difficulty);\n    resetGame();\n  };\n  \n  // Change player color\n  const changePlayerColor = (color) => {\n    setPlayerColor(color);\n    resetGame();\n  };\n  \n  // Render a cell\n  const renderCell = (value, rowIndex, colIndex) => {\n    let cellClass = 'cell';\n    \n    // Handle animation\n    if (dropAnimation.active && dropAnimation.col === colIndex && rowIndex <= dropAnimation.row) {\n      if (rowIndex === dropAnimation.row) {\n        cellClass += dropAnimation.player === PLAYER_1 ? ' player1 dropping' : ' player2 dropping';\n      }\n    } else if (value === PLAYER_1) {\n      cellClass += ' player1';\n    } else if (value === PLAYER_2) {\n      cellClass += ' player2';\n    }\n    \n    // Check if this cell is part of the winning combination\n    const isWinningCell = winningCells.some(cell => \n      cell.row === rowIndex && cell.col === colIndex\n    );\n    \n    if (isWinningCell) {\n      cellClass += ' winning';\n    }\n    \n    return (\n      <div \n        key={`${rowIndex}-${colIndex}`} \n        className={cellClass}\n      />\n    );\n  };\n  \n  // Render a column\n  const renderColumn = (colIndex) => {\n    const isColumnFull = findLowestEmptyRow(board, colIndex) === -1;\n    const isHovered = hoverColumn === colIndex && !isColumnFull && gameStatus === 'inProgress';\n    const isPlayerTurn = gameMode !== 'player-vs-ai' || currentPlayer === playerColor;\n    const isInteractive = gameStatus === 'inProgress' && !dropAnimation.active && isPlayerTurn;\n    \n    return (\n      <div \n        key={colIndex} \n        className={`column ${isHovered ? 'hover' : ''} ${isColumnFull ? 'full' : ''} ${!isInteractive ? 'not-interactive' : ''}`}\n        onClick={() => handleColumnClick(colIndex)}\n        onMouseEnter={() => setHoverColumn(colIndex)}\n        onMouseLeave={() => setHoverColumn(null)}\n      >\n        {board.map((row, rowIndex) => renderCell(row[colIndex], rowIndex, colIndex))}\n      </div>\n    );\n  };\n  \n  // Game status message\n  const renderGameStatus = () => {\n    if (gameStatus === 'win') {\n      const winnerText = gameMode === 'player-vs-ai' \n        ? (winner === playerColor ? 'You win!' : 'AI wins!') \n        : `Player ${winner} wins!`;\n      return <div className=\"status\">{winnerText}</div>;\n    } else if (gameStatus === 'draw') {\n      return <div className=\"status\">Game ended in a draw!</div>;\n    } else if (aiThinking) {\n      return <div className=\"status thinking\">AI is thinking...</div>;\n    } else if (dropAnimation.active) {\n      return <div className=\"status\">Making move...</div>;\n    } else {\n      const turnText = gameMode === 'player-vs-ai'\n        ? (currentPlayer === playerColor ? 'Your turn' : 'AI turn')\n        : `Player ${currentPlayer}'s turn`;\n      return <div className=\"status\">{turnText}</div>;\n    }\n  };\n  \n  // Render game settings\n  const renderGameSettings = () => {\n    return (\n      <div className=\"game-settings\">\n        <div className=\"setting-group\">\n          <label>Game Mode:</label>\n          <div className=\"button-group\">\n            <button \n              className={`mode-button ${gameMode === 'player-vs-player' ? 'active' : ''}`}\n              onClick={() => changeGameMode('player-vs-player')}\n            >\n              Player vs Player\n            </button>\n            <button \n              className={`mode-button ${gameMode === 'player-vs-ai' ? 'active' : ''}`}\n              onClick={() => changeGameMode('player-vs-ai')}\n            >\n              Player vs AI\n            </button>\n          </div>\n        </div>\n        \n        {gameMode === 'player-vs-ai' && (\n          <>\n            <div className=\"setting-group\">\n              <label>AI Difficulty:</label>\n              <div className=\"button-group\">\n                <button \n                  className={`difficulty-button ${aiDifficulty === AI_LEVEL.EASY ? 'active' : ''}`}\n                  onClick={() => changeAiDifficulty(AI_LEVEL.EASY)}\n                >\n                  Easy\n                </button>\n                <button \n                  className={`difficulty-button ${aiDifficulty === AI_LEVEL.MEDIUM ? 'active' : ''}`}\n                  onClick={() => changeAiDifficulty(AI_LEVEL.MEDIUM)}\n                >\n                  Medium\n                </button>\n                <button \n                  className={`difficulty-button ${aiDifficulty === AI_LEVEL.HARD ? 'active' : ''}`}\n                  onClick={() => changeAiDifficulty(AI_LEVEL.HARD)}\n                >\n                  Hard\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"setting-group\">\n              <label>Your Color:</label>\n              <div className=\"button-group\">\n                <button \n                  className={`color-button player1 ${playerColor === PLAYER_1 ? 'active' : ''}`}\n                  onClick={() => changePlayerColor(PLAYER_1)}\n                >\n                  Red\n                </button>\n                <button \n                  className={`color-button player2 ${playerColor === PLAYER_2 ? 'active' : ''}`}\n                  onClick={() => changePlayerColor(PLAYER_2)}\n                >\n                  Yellow\n                </button>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"connect4-game\">\n      <h1>Connect 4</h1>\n      \n      {renderGameSettings()}\n      \n      {renderGameStatus()}\n      \n      <div className=\"board\">\n        {Array(COLS).fill().map((_, colIndex) => renderColumn(colIndex))}\n      </div>\n      \n      <button className=\"reset-button\" onClick={resetGame}>\n        Reset Game\n      </button>\n      \n      <div className=\"instructions\">\n        <h3>How to Play:</h3>\n        <p>Click on a column to drop your disc. The goal is to connect 4 of your discs in a row - horizontally, vertically, or diagonally.</p>\n      </div>\n      \n      <style jsx>{`\n        .connect4-game {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          font-family: Arial, sans-serif;\n          margin: 10px auto;\n          max-width: 100%;\n          padding: 0 10px;\n        }\n        \n        h1 {\n          color: #333;\n          margin-bottom: 15px;\n          font-size: clamp(1.5rem, 4vw, 2rem);\n        }\n        \n        .status {\n          font-size: clamp(1rem, 3vw, 1.2rem);\n          margin-bottom: 15px;\n          font-weight: bold;\n          text-align: center;\n          min-height: 30px;\n        }\n        \n        .status.thinking {\n          color: #0066cc;\n        }\n        \n        .board {\n          display: flex;\n          background-color: #0066cc;\n          padding: clamp(5px, 2vw, 10px);\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n          margin: 0 auto;\n          width: fit-content;\n        }\n        \n        .column {\n          display: flex;\n          flex-direction: column;\n          cursor: pointer;\n          position: relative;\n        }\n        \n        .column.hover {\n          background-color: rgba(255, 255, 255, 0.2);\n        }\n        \n        .column.full, .column.not-interactive {\n          cursor: not-allowed;\n        }\n        \n        .cell {\n          width: clamp(30px, 10vw, 50px);\n          height: clamp(30px, 10vw, 50px);\n          margin: clamp(3px, 1vw, 5px);\n          border-radius: 50%;\n          background-color: white;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);\n          transition: background-color 0.3s ease;\n          position: relative;\n        }\n        \n        .cell.player1 {\n          background-color: #ff4136;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.player2 {\n          background-color: #ffdc00;\n          box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n        }\n        \n        .cell.winning {\n          box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3);\n          animation: pulse 1.5s infinite;\n        }\n        \n        .cell.dropping {\n          animation: dropAnimation 0.4s ease-in;\n        }\n        \n        @keyframes pulse {\n          0% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          50% { box-shadow: 0 0 15px 5px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n          100% { box-shadow: 0 0 10px 3px #4CAF50, inset 0 0 10px rgba(0, 0, 0, 0.3); }\n        }\n        \n        @keyframes dropAnimation {\n          0% { opacity: 0; transform: translateY(-300%); }\n          70% { opacity: 1; transform: translateY(10%); }\n          85% { transform: translateY(-5%); }\n          100% { transform: translateY(0); }\n        }\n        \n        .reset-button {\n          margin-top: 20px;\n          padding: 10px 20px;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n          background-color: #4CAF50;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        \n        .reset-button:hover {\n          background-color: #45a049;\n        }\n        \n        .game-settings {\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n          margin-bottom: 20px;\n          width: 100%;\n          max-width: 400px;\n        }\n        \n        .setting-group {\n          display: flex;\n          flex-direction: column;\n          gap: 5px;\n        }\n        \n        .setting-group label {\n          font-weight: bold;\n          font-size: clamp(0.9rem, 2.5vw, 1rem);\n        }\n        \n        .button-group {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 5px;\n        }\n        \n        .button-group button {\n          flex: 1;\n          min-width: 80px;\n          padding: 8px;\n          font-size: clamp(0.8rem, 2vw, 0.9rem);\n          border: 1px solid #ddd;\n          background-color: #f5f5f5;\n          cursor: pointer;\n          border-radius: 4px;\n        }\n        \n        .button-group button.active {\n          border-color: #0066cc;\n          background-color: #e6f7ff;\n          font-weight: bold;\n        }\n        \n        .color-button.player1 {\n          color: white;\n          background-color: #ff4136;\n          border-color: #ff4136;\n        }\n        \n        .color-button.player2 {\n          background-color: #ffdc00;\n          border-color: #ffdc00;\n        }\n        \n        .instructions {\n          margin-top: 20px;\n          text-align: center;\n          max-width: 400px;\n        }\n        \n        .instructions h3 {\n          margin-bottom: 10px;\n        }\n        \n        /* Mobile-specific styles */\n        @media (max-width: 480px) {\n          .game-settings {\n            padding: 0 5px;\n          }\n          \n          .button-group {\n            flex-direction: column;\n          }\n          \n          .button-group button {\n            width: 100%;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Connect4Game;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,IAAI,EACJC,IAAI,EACJC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,gBAAgB,EAChBC,kBAAkB,EAClBC,QAAQ,EACRC,WAAW,EACXC,aAAa,QACR,aAAa;AACpB,SAASC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,YAAY;;AAE5D;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAACO,gBAAgB,CAAC,CAAC,CAAC;EACtD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAACK,QAAQ,CAAC;EAC5D,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;EAC5D,MAAM,CAAC2B,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACiC,QAAQ,EAAEC,WAAW,CAAC,GAAGlC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACmC,YAAY,EAAEC,eAAe,CAAC,GAAGpC,QAAQ,CAACa,QAAQ,CAACwB,MAAM,CAAC;EACjE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,CAACK,QAAQ,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACqC,aAAa,EAAEC,gBAAgB,CAAC,GAAG3C,QAAQ,CAAC;IAAE4C,MAAM,EAAE,KAAK;IAAEC,GAAG,EAAE,IAAI;IAAEC,GAAG,EAAE;EAAK,CAAC,CAAC;;EAE3F;EACA7C,SAAS,CAAC,MAAM;IACd;IACA,MAAM8C,QAAQ,GAAGd,QAAQ,KAAK,cAAc,IAC3BV,aAAa,KAAKiB,WAAW,IAC7Bf,UAAU,KAAK,YAAY;IAE5C,IAAIsB,QAAQ,IAAI,CAACL,aAAa,CAACE,MAAM,EAAE;MACrC;MACAL,aAAa,CAAC,IAAI,CAAC;MACnB,MAAMS,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/BC,UAAU,CAAC,CAAC;QACZX,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC,EAAE,GAAG,CAAC;MAEP,OAAO,MAAMY,YAAY,CAACH,OAAO,CAAC;IACpC;EACF,CAAC,EAAE,CAACzB,aAAa,EAAEE,UAAU,EAAEQ,QAAQ,EAAEO,WAAW,EAAEnB,KAAK,EAAEqB,aAAa,CAAC,CAAC;;EAE5E;EACA,MAAMQ,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIzB,UAAU,KAAK,YAAY,EAAE;IAEjC,MAAM2B,QAAQ,GAAGZ,WAAW,KAAKnC,QAAQ,GAAGC,QAAQ,GAAGD,QAAQ;IAC/D,MAAMgD,QAAQ,GAAGzC,SAAS,CAACS,KAAK,EAAE+B,QAAQ,EAAEjB,YAAY,CAAC;IAEzD,IAAIkB,QAAQ,KAAK,CAAC,CAAC,EAAE;MACnBC,UAAU,CAACD,QAAQ,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAID,QAAQ,IAAK;IAC/B,IAAI5B,UAAU,KAAK,YAAY,IAAI,CAACf,WAAW,CAACW,KAAK,EAAEgC,QAAQ,CAAC,IAAIX,aAAa,CAACE,MAAM,EAAE;IAE1F,MAAMW,QAAQ,GAAG/C,kBAAkB,CAACa,KAAK,EAAEgC,QAAQ,CAAC;IACpD,IAAIE,QAAQ,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC;;IAE7B;IACAZ,gBAAgB,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,GAAG,EAAEQ,QAAQ;MAAEP,GAAG,EAAES,QAAQ;MAAEC,MAAM,EAAEjC;IAAc,CAAC,CAAC;;IAEvF;IACA0B,UAAU,CAAC,MAAM;MACf,MAAM;QAAE5B,KAAK,EAAEoC;MAAS,CAAC,GAAGhD,QAAQ,CAACY,KAAK,EAAEgC,QAAQ,EAAE9B,aAAa,CAAC;MACpED,QAAQ,CAACmC,QAAQ,CAAC;;MAElB;MACA,MAAMC,MAAM,GAAG/C,aAAa,CAAC8C,QAAQ,EAAEF,QAAQ,EAAEF,QAAQ,CAAC;MAE1D,IAAIK,MAAM,CAACA,MAAM,KAAK,KAAK,EAAE;QAC3BhC,aAAa,CAAC,KAAK,CAAC;QACpBE,SAAS,CAAC8B,MAAM,CAAC/B,MAAM,CAAC;QACxBG,eAAe,CAAC4B,MAAM,CAAC7B,YAAY,CAAC;MACtC,CAAC,MAAM,IAAI6B,MAAM,CAACA,MAAM,KAAK,MAAM,EAAE;QACnChC,aAAa,CAAC,MAAM,CAAC;MACvB,CAAC,MAAM;QACL;QACAF,gBAAgB,CAACD,aAAa,KAAKlB,QAAQ,GAAGC,QAAQ,GAAGD,QAAQ,CAAC;MACpE;;MAEA;MACAsC,gBAAgB,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEC,GAAG,EAAE,IAAI;QAAEC,GAAG,EAAE;MAAK,CAAC,CAAC;IAC3D,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC;;EAED;EACA,MAAMa,iBAAiB,GAAIN,QAAQ,IAAK;IACtC;IACA,IAAIpB,QAAQ,KAAK,cAAc,IAAIV,aAAa,KAAKiB,WAAW,EAAE;MAChE;IACF;IAEAc,UAAU,CAACD,QAAQ,CAAC;EACtB,CAAC;;EAED;EACA,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACtBtC,QAAQ,CAACf,gBAAgB,CAAC,CAAC,CAAC;IAC5BiB,gBAAgB,CAACnB,QAAQ,CAAC;IAC1BqB,aAAa,CAAC,YAAY,CAAC;IAC3BE,SAAS,CAAC,IAAI,CAAC;IACfE,eAAe,CAAC,EAAE,CAAC;IACnBE,cAAc,CAAC,IAAI,CAAC;IACpBO,aAAa,CAAC,KAAK,CAAC;IACpBI,gBAAgB,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,GAAG,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAAC;EAC3D,CAAC;;EAED;EACA,MAAMe,cAAc,GAAIC,IAAI,IAAK;IAC/B5B,WAAW,CAAC4B,IAAI,CAAC;IACjBF,SAAS,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAMG,kBAAkB,GAAIC,UAAU,IAAK;IACzC5B,eAAe,CAAC4B,UAAU,CAAC;IAC3BJ,SAAS,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAMK,iBAAiB,GAAIC,KAAK,IAAK;IACnCzB,cAAc,CAACyB,KAAK,CAAC;IACrBN,SAAS,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAMO,UAAU,GAAGA,CAACC,KAAK,EAAEb,QAAQ,EAAEF,QAAQ,KAAK;IAChD,IAAIgB,SAAS,GAAG,MAAM;;IAEtB;IACA,IAAI3B,aAAa,CAACE,MAAM,IAAIF,aAAa,CAACG,GAAG,KAAKQ,QAAQ,IAAIE,QAAQ,IAAIb,aAAa,CAACI,GAAG,EAAE;MAC3F,IAAIS,QAAQ,KAAKb,aAAa,CAACI,GAAG,EAAE;QAClCuB,SAAS,IAAI3B,aAAa,CAACc,MAAM,KAAKnD,QAAQ,GAAG,mBAAmB,GAAG,mBAAmB;MAC5F;IACF,CAAC,MAAM,IAAI+D,KAAK,KAAK/D,QAAQ,EAAE;MAC7BgE,SAAS,IAAI,UAAU;IACzB,CAAC,MAAM,IAAID,KAAK,KAAK9D,QAAQ,EAAE;MAC7B+D,SAAS,IAAI,UAAU;IACzB;;IAEA;IACA,MAAMC,aAAa,GAAGzC,YAAY,CAAC0C,IAAI,CAACC,IAAI,IAC1CA,IAAI,CAAC1B,GAAG,KAAKS,QAAQ,IAAIiB,IAAI,CAAC3B,GAAG,KAAKQ,QACxC,CAAC;IAED,IAAIiB,aAAa,EAAE;MACjBD,SAAS,IAAI,UAAU;IACzB;IAEA,oBACErD,OAAA;MAEEyD,SAAS,EAAEJ;IAAU,GADhB,GAAGd,QAAQ,IAAIF,QAAQ,EAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE/B,CAAC;EAEN,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIzB,QAAQ,IAAK;IACjC,MAAM0B,YAAY,GAAGvE,kBAAkB,CAACa,KAAK,EAAEgC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC/D,MAAM2B,SAAS,GAAGjD,WAAW,KAAKsB,QAAQ,IAAI,CAAC0B,YAAY,IAAItD,UAAU,KAAK,YAAY;IAC1F,MAAMwD,YAAY,GAAGhD,QAAQ,KAAK,cAAc,IAAIV,aAAa,KAAKiB,WAAW;IACjF,MAAM0C,aAAa,GAAGzD,UAAU,KAAK,YAAY,IAAI,CAACiB,aAAa,CAACE,MAAM,IAAIqC,YAAY;IAE1F,oBACEjE,OAAA;MAEEyD,SAAS,EAAE,UAAUO,SAAS,GAAG,OAAO,GAAG,EAAE,IAAID,YAAY,GAAG,MAAM,GAAG,EAAE,IAAI,CAACG,aAAa,GAAG,iBAAiB,GAAG,EAAE,EAAG;MACzHC,OAAO,EAAEA,CAAA,KAAMxB,iBAAiB,CAACN,QAAQ,CAAE;MAC3C+B,YAAY,EAAEA,CAAA,KAAMpD,cAAc,CAACqB,QAAQ,CAAE;MAC7CgC,YAAY,EAAEA,CAAA,KAAMrD,cAAc,CAAC,IAAI,CAAE;MAAAsD,QAAA,EAExCjE,KAAK,CAACkE,GAAG,CAAC,CAACzC,GAAG,EAAES,QAAQ,KAAKY,UAAU,CAACrB,GAAG,CAACO,QAAQ,CAAC,EAAEE,QAAQ,EAAEF,QAAQ,CAAC;IAAC,GANvEA,QAAQ;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOV,CAAC;EAEV,CAAC;;EAED;EACA,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI/D,UAAU,KAAK,KAAK,EAAE;MACxB,MAAMgE,UAAU,GAAGxD,QAAQ,KAAK,cAAc,GACzCN,MAAM,KAAKa,WAAW,GAAG,UAAU,GAAG,UAAU,GACjD,UAAUb,MAAM,QAAQ;MAC5B,oBAAOX,OAAA;QAAKyD,SAAS,EAAC,QAAQ;QAAAa,QAAA,EAAEG;MAAU;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IACnD,CAAC,MAAM,IAAIpD,UAAU,KAAK,MAAM,EAAE;MAChC,oBAAOT,OAAA;QAAKyD,SAAS,EAAC,QAAQ;QAAAa,QAAA,EAAC;MAAqB;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAC5D,CAAC,MAAM,IAAIvC,UAAU,EAAE;MACrB,oBAAOtB,OAAA;QAAKyD,SAAS,EAAC,iBAAiB;QAAAa,QAAA,EAAC;MAAiB;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IACjE,CAAC,MAAM,IAAInC,aAAa,CAACE,MAAM,EAAE;MAC/B,oBAAO5B,OAAA;QAAKyD,SAAS,EAAC,QAAQ;QAAAa,QAAA,EAAC;MAAc;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IACrD,CAAC,MAAM;MACL,MAAMa,QAAQ,GAAGzD,QAAQ,KAAK,cAAc,GACvCV,aAAa,KAAKiB,WAAW,GAAG,WAAW,GAAG,SAAS,GACxD,UAAUjB,aAAa,SAAS;MACpC,oBAAOP,OAAA;QAAKyD,SAAS,EAAC,QAAQ;QAAAa,QAAA,EAAEI;MAAQ;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMc,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,oBACE3E,OAAA;MAAKyD,SAAS,EAAC,eAAe;MAAAa,QAAA,gBAC5BtE,OAAA;QAAKyD,SAAS,EAAC,eAAe;QAAAa,QAAA,gBAC5BtE,OAAA;UAAAsE,QAAA,EAAO;QAAU;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACzB7D,OAAA;UAAKyD,SAAS,EAAC,cAAc;UAAAa,QAAA,gBAC3BtE,OAAA;YACEyD,SAAS,EAAE,eAAexC,QAAQ,KAAK,kBAAkB,GAAG,QAAQ,GAAG,EAAE,EAAG;YAC5EkD,OAAO,EAAEA,CAAA,KAAMtB,cAAc,CAAC,kBAAkB,CAAE;YAAAyB,QAAA,EACnD;UAED;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT7D,OAAA;YACEyD,SAAS,EAAE,eAAexC,QAAQ,KAAK,cAAc,GAAG,QAAQ,GAAG,EAAE,EAAG;YACxEkD,OAAO,EAAEA,CAAA,KAAMtB,cAAc,CAAC,cAAc,CAAE;YAAAyB,QAAA,EAC/C;UAED;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAEL5C,QAAQ,KAAK,cAAc,iBAC1BjB,OAAA,CAAAE,SAAA;QAAAoE,QAAA,gBACEtE,OAAA;UAAKyD,SAAS,EAAC,eAAe;UAAAa,QAAA,gBAC5BtE,OAAA;YAAAsE,QAAA,EAAO;UAAc;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC7B7D,OAAA;YAAKyD,SAAS,EAAC,cAAc;YAAAa,QAAA,gBAC3BtE,OAAA;cACEyD,SAAS,EAAE,qBAAqBtC,YAAY,KAAKtB,QAAQ,CAAC+E,IAAI,GAAG,QAAQ,GAAG,EAAE,EAAG;cACjFT,OAAO,EAAEA,CAAA,KAAMpB,kBAAkB,CAAClD,QAAQ,CAAC+E,IAAI,CAAE;cAAAN,QAAA,EAClD;YAED;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT7D,OAAA;cACEyD,SAAS,EAAE,qBAAqBtC,YAAY,KAAKtB,QAAQ,CAACwB,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAG;cACnF8C,OAAO,EAAEA,CAAA,KAAMpB,kBAAkB,CAAClD,QAAQ,CAACwB,MAAM,CAAE;cAAAiD,QAAA,EACpD;YAED;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT7D,OAAA;cACEyD,SAAS,EAAE,qBAAqBtC,YAAY,KAAKtB,QAAQ,CAACgF,IAAI,GAAG,QAAQ,GAAG,EAAE,EAAG;cACjFV,OAAO,EAAEA,CAAA,KAAMpB,kBAAkB,CAAClD,QAAQ,CAACgF,IAAI,CAAE;cAAAP,QAAA,EAClD;YAED;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAEN7D,OAAA;UAAKyD,SAAS,EAAC,eAAe;UAAAa,QAAA,gBAC5BtE,OAAA;YAAAsE,QAAA,EAAO;UAAW;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1B7D,OAAA;YAAKyD,SAAS,EAAC,cAAc;YAAAa,QAAA,gBAC3BtE,OAAA;cACEyD,SAAS,EAAE,wBAAwBjC,WAAW,KAAKnC,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;cAC9E8E,OAAO,EAAEA,CAAA,KAAMlB,iBAAiB,CAAC5D,QAAQ,CAAE;cAAAiF,QAAA,EAC5C;YAED;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT7D,OAAA;cACEyD,SAAS,EAAE,wBAAwBjC,WAAW,KAAKlC,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;cAC9E6E,OAAO,EAAEA,CAAA,KAAMlB,iBAAiB,CAAC3D,QAAQ,CAAE;cAAAgF,QAAA,EAC5C;YAED;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA,eACN,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV,CAAC;EAED,oBACE7D,OAAA;IAAKyD,SAAS,EAAC,eAAe;IAAAa,QAAA,gBAC5BtE,OAAA;MAAAsE,QAAA,EAAI;IAAS;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEjBc,kBAAkB,CAAC,CAAC,EAEpBH,gBAAgB,CAAC,CAAC,eAEnBxE,OAAA;MAAKyD,SAAS,EAAC,OAAO;MAAAa,QAAA,EACnBQ,KAAK,CAAC3F,IAAI,CAAC,CAAC4F,IAAI,CAAC,CAAC,CAACR,GAAG,CAAC,CAACS,CAAC,EAAE3C,QAAQ,KAAKyB,YAAY,CAACzB,QAAQ,CAAC;IAAC;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC,eAEN7D,OAAA;MAAQyD,SAAS,EAAC,cAAc;MAACU,OAAO,EAAEvB,SAAU;MAAA0B,QAAA,EAAC;IAErD;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAET7D,OAAA;MAAKyD,SAAS,EAAC,cAAc;MAAAa,QAAA,gBAC3BtE,OAAA;QAAAsE,QAAA,EAAI;MAAY;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB7D,OAAA;QAAAsE,QAAA,EAAG;MAA+H;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnI,CAAC,eAEN7D,OAAA;MAAOiF,GAAG;MAAAX,QAAA,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAO;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACzD,EAAA,CA7dID,YAAY;AAAA+E,EAAA,GAAZ/E,YAAY;AA+dlB,eAAeA,YAAY;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}